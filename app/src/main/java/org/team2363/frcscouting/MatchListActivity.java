package org.team2363.frcscouting;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.Preference;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.Toast;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.prefs.Preferences;


/**
 * An activity representing a list of Matches. This activity
 * has different presentations for handset and tablet-size devices. On
 * handsets, the activity presents a list of items, which when touched,
 * lead to a {@link MatchDetailActivity} representing
 * item details. On tablets, the activity presents the list of items and
 * item details side-by-side using two vertical panes.
 * <p>
 * The activity makes heavy use of fragments. The list of items is a
 * {@link MatchListFragment} and the item details
 * (if present) is a {@link MatchDetailFragment}.
 * <p>
 * This activity also implements the required
 * {@link MatchListFragment.Callbacks} interface
 * to listen for item selections.
 */
public class MatchListActivity extends FragmentActivity
        implements MatchListFragment.Callbacks {

    /**
     * Whether or not the activity is in two-pane mode, i.e. running on a tablet
     * device.
     */
    private boolean mTwoPane;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        File readme = new File(Brain.DIRECTORY + "readme.txt");
        if(! readme.exists()) {
            try {
                readme.createNewFile();
                FileWriter writer = new FileWriter(readme);
                writer.write("scouting.scout.xml is the data output by the user, which can be fed into the FRCScoutingCompiler.\n" +
                        "schedule.sched.xml is the schedule input, which is used to generate the teams scouted by the user.\n" +
                        "It is generated by the compiler, but future versions will be able to download this from the internet.\n" +
                        "scoresheet.scores.xml is the file that defines the scouting layout.");
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        Brain b = Brain.getInstance();
        File restore = new File(Brain.SCOUTING_FILE);
        if(restore.canRead()) b.restoreMatchList(this, false);
        else b.newMatchList(this);

        setContentView(R.layout.activity_match_list);
        b.setupActionBar(this);

        if (findViewById(R.id.match_detail_container) != null) {
            // The detail container view will be present only in the
            // large-screen layouts (res/values-large and
            // res/values-sw600dp). If this view is present, then the
            // activity should be in two-pane mode.
            mTwoPane = true;

            // In two-pane mode, list items should be given the
            // 'activated' state when touched.
            ((MatchListFragment) getSupportFragmentManager()
                    .findFragmentById(R.id.match_list))
                    .setActivateOnItemClick(true);
        }

        // TODO: If exposing deep links into your app, handle intents here.
    }

    /**
     * Callback method from {@link MatchListFragment.Callbacks}
     * indicating that the item with the given ID was selected.
     */
    @Override
    public void onItemSelected(String id) {
        if (mTwoPane) {
            // In two-pane mode, show the detail view in this activity by
            // adding or replacing the detail fragment using a
            // fragment transaction.
            Bundle arguments = new Bundle();
            arguments.putString(MatchDetailFragment.ARG_ITEM_ID, id);
            MatchDetailFragment fragment = new MatchDetailFragment();
            fragment.setArguments(arguments);
            getSupportFragmentManager().beginTransaction()
                    .replace(R.id.match_detail_container, fragment)
                    .commit();

        } else {
            // In single-pane mode, simply start the detail activity
            // for the selected item ID.
            Intent detailIntent = new Intent(this, MatchDetailActivity.class);
            detailIntent.putExtra(MatchDetailFragment.ARG_ITEM_ID, id);
            startActivity(detailIntent);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu, menu);
        return true;
    }

    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            case R.id.menu_settings:
                startSettings();
        }

        return true;
    }

    public void startSettings() {
        Intent i = new Intent(this, SettingsActivity.class);
        startActivity(i);
    }
}
